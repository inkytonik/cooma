module org.bitbucket.inkytonik.cooma.CoomaParser;

header {
    import org.bitbucket.inkytonik.cooma.CoomaParserSyntax.*;
    import scala.math.BigInt;
}

// Cooma source language

Program =
  Spacing Expression EOF.

Expression {paren} =
    "fun" '(' Arguments ")" "=" Expression      {Fun, right, 4}
  | '(' Expression ** "," ")" "=>" Expression   {FunT, right, 4}
  | Expression '(' Expression ** "," ')'        {App, left, 3}
  | Expression "&" Expression                   {Cat, left, 2}
  | Expression '.' FieldUse                     {Sel, left, 1}
  | '{' '}'                                     {Uni}
  | '{' nestnl (BlockExp) \n '}'                {Blk}
  | '{' Field ++ "," '}'                        {Rec}
  | '{' Row '}'                                 {RecT}
  | IntLit                                      {Num, 1: BigInt.apply : BigInt}
  | 'Int'                                       {IntT}
  | StringLit                                   {Str}
  | 'String'                                    {StrT}
  | 'Type'                                      {TypT}
  | 'Unit'                                      {UniT}
  | IdnUse                                      {Idn}.

Arguments =
  Argument ** ",".

Argument =
  IdnDef sp ":" Expression.

Field =
  Identifier sp "=" Expression.

FieldUse =
  Identifier.

BlockExp =
    Def+ BlockExp   {LetFun}
  | Val BlockExp    {LetVal}
  | Expression      {Return}.

Def =
  "def" IdnDef sp Body \n.

Body =
  '(' Arguments ")" ":" Expression sp '=' nestnl (Expression).

Val =
  "val" IdnDef sp "=" Expression \n.

Row =
  FieldType ++ ",".

FieldType =
  Identifier sp ":" Expression.

// Lexical syntax

IdnDef =
  Identifier.

IdnUse =
  Identifier.

IntLit : Token =
  '-'? Digits.

Digits : String =
  Digit+.

Digit : String =
  [0-9].

StringLit : Token =
  '"' StringChar* '"'.

StringChar : String =
  '\\' ([btnfr] / '\\' / '"' / "'" /
        OctDigit OctDigit OctDigit /
        OctDigit OctDigit /
        OctDigit OctDigit) /
  !'"' _.

OctDigit : String =
  [0-7].

// Constructs used by REPL parsing

Whitespace : Void =
  Spacing EOF.

REPLInput =
  Spacing REPLEntry EOF.

REPLEntry : REPLInput =
    Expression  {REPLExpression}
  | Def         {REPLDef}
  | Val         {REPLVal}.
