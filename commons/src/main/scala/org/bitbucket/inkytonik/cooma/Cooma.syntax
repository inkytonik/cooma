module org.bitbucket.inkytonik.cooma.CoomaParser;

header {
    import org.bitbucket.inkytonik.cooma.CoomaParserSyntax.*;
    import scala.math.BigInt;
}

option defaultIndent (2);

// Cooma source language

Program =
  Spacing Expression EOF.

Expression {paren} =
    "fun" '(' Arguments ")" Expression                    {Fun, right, 15}
  | '(' ArgumentTypes ")" Expression                      {FunT, right, 15}
  | Expression sp "match" '{' nest(Case+) \n '}'          {Mat, left, 14}
  | "if" Expression "then" Expression "else" Expression   {If, right, 13}
  | Expression sp "&" Expression                          {Cat, left, 12}
  | Expression sp OrOp Expression                         {Or, left, 11}
  | Expression sp AndOp Expression                        {And, left, 10}
  | Expression sp EqlOp Expression                        {Eql, left, 9}
  | Expression sp RelOp Expression                        {Rel, none, 8}
  | Expression sp AddOp Expression                        {Add, left, 7}
  | Expression sp MulOp Expression                        {Mul, left, 6}
  | Expression sp ExpOp Expression                        {Exp, right, 5}
  | Expression sp IndOp Expression                        {Ind, left, 4}
  | PreOp Expression                                      {Pre, 3}
  | "|" Expression "|"                                    {Abs, 2}
  | Expression '(' Expression ** "," ')'                  {App, left, 1}
  | Expression '.' FieldUse                               {Sel, left, 1}
  | '{' '}'                                               {Uni}
  | '{' nestnl(BlockExp) \n '}'                           {Blk}
  | '{' nest(Field ++ ',') \n '}'                         {Rec}
  | '{' nest(FieldType ++ ',') \n '}'                     {RecT}
  | '<<' nest(Field) \n '>>'                              {Var}
  | '<<' nest(FieldType ++ ',') \n '>>'                   {VarT}
  | IntLit                                                {Num, 1: BigInt.apply : BigInt}
  | StringLit                                             {Str}
  | '[' VecElems ']'                                      {Vec}
  | 'Vector' '(' ')'                                      {VecNilT}
  | 'Vector' '(' Expression ')'                           {VecT}
  | "prim" UserPrimitive '(' Expression ** "," ')'        {Prm}
  | IdnUse                                                {Idn}.

AddOp =
    "++" {Concat}
  | "+" {Plus}
  | "-" {Minus}.

AndOp =
  "&&" {AmpAmp}.

EqlOp =
    "==" {Equal}
  | "!=" {NotEqual}.

ExpOp =
  "**" {Expn}.

IndOp =
  "!" {Index}.

MulOp =
    "%" {Percent}
  | "*" {Star}
  | "/" {Slash}.

OrOp =
  "||" {BarBar}.

PreOp =
  '!' {Bang}.

RelOp =
    ">=" {Gte}
  | ">"  {Gt}
  | "<=" {Lte}
  | "<"  {Lt}.

Arguments =
  Argument ** ",".

Argument =
  IdnDef sp ":" Expression StringLit?.

ArgumentTypes =
  ArgumentType ** ",".

ArgumentType =
  (IdnDef sp ":")? Expression.

Case =
  \n "case" Identifier '(' IdnDef ")" '=>' nestnl(Expression).

Field =
  \n Identifier sp "=" Expression.

FieldUse =
  Identifier.

BlockExp =
    Defs BlockExp   {BlkDef}
  | Let BlockExp    {BlkLet}
  | Expression      {Return}.

Defs =
  Def+.

Def =
  "def" IdnDef sp Body \n.

Body =
  '(' Arguments ")" Expression sp '=' nestnl(Expression).

Let =
  LetKind IdnDef LetType? sp "=" Expression \n.

LetType =
  sp ":" Expression.

LetKind =
    "type" {Type}
  | "val" {Val}.

FieldType =
  \n Identifier sp ":" Expression.

VecElems =
  Expression ** ",".

// Lexical syntax

IdnDef =
  Identifier.

IdnUse =
  Identifier.

IntLit : Token =
  '-'? Digits.

Digits : String =
  Digit+.

Digit : String =
  [0-9].

StringLit : Token =
  '"' StringChars '"'.

StringChars : String =
  StringChar*.

StringChar : String =
  '\\' ([btnfr] / '\\' / '"') /
  !'"' _.

OctDigit : String =
  [0-7].

Whitespace : Void =
  Spacing EOF.

Spacing1 : Void =
  (Space / Comment)+.

// Reference backend constructs

Term =
    "%case" Identifier sp (CaseTerm sp)*                                 {CasV}
  | "%letc" Identifier sp Identifier sp '=' nestnl(Term) \n "%in" Term   {LetC}
  | '%letf' nest(DefTerm+) \n "%in" Term                                 {LetF}
  | "%letv" Identifier sp '=' nest(Value) \n "%in" Term                  {LetV}
  | Identifier sp Identifier sp Identifier                               {AppF}
  | Cont sp Identifier                                                   {AppC}.

Cont =
    Identifier   {IdnC}
  | '%halt'      {HaltC}.

CaseTerm =
  '(' Identifier sp Identifier ')'.

DefTerm =
  \n "%def" Identifier sp Identifier sp Identifier sp '=' nestnl(Term).

Value {line} =
    "%fun" Identifier sp Identifier sp '=' nestnl(Term)   {FunV}
  | IntLit                                                {IntV, 1: BigInt.apply : BigInt}
  | "%prim" Primitive (sp Identifier)*                    {PrmV}
  | '{' nest(FldV*) \n '}'                                {RecV}
  | '"' StringChars '"'                                   {StrV}
  | '<<' nest(FldV) \n '>>'                               {VarV}
  | '[' (Identifier ** ",") ']'                           {VecV}.

FldV =
  \n Identifier sp "=" Identifier.

Primitive =
    "Argument" IntLit                      {ArgumentP, 1: Integer.parseInt : Int}
  | "ArgumentCheck" IntLit                 {ArgumentCheckP, 1: Integer.parseInt : Int}
  | "Capability" Identifier                {CapabilityP}
  | 'DbTableAll' IntLit StringLit          {DbTableAllP, 1: Integer.parseInt : Int}
  | 'DbTableDelete' IntLit StringLit       {DbTableDeleteP, 1: Integer.parseInt : Int}
  | 'DbTableGetById' IntLit StringLit      {DbTableGetByIdP, 1: Integer.parseInt : Int}
  | 'DbTableInsert' IntLit StringLit       {DbTableInsertP, 1: Integer.parseInt : Int}
  | 'DbTableUpdate' IntLit StringLit       {DbTableUpdateP, 1: Integer.parseInt : Int}
  | "FolderReaderRead" Filename            {FolderReaderReadP}
  | "FolderRunnerRun" Filename             {FolderRunnerRunP}
  | "FolderWriterWrite" Filename           {FolderWriterWriteP}
  | "HttpClient" Identifier sp StringLit   {HttpClientP}
  | "ReaderRead" Filename                  {ReaderReadP}
  | 'RecConcat'                            {RecConcatP}
  | 'RecSelect'                            {RecSelectP}
  | 'RunnerRun' Filename                   {RunnerRunP}
  | "WriterWrite" Filename                 {WriterWriteP}
  | UserPrimitive                          {UserP}.

UserPrimitive =
    'Equal'       {EqualP}
  | 'IntAbs'      {IntAbsP}
  | 'IntAdd'      {IntAddP}
  | 'IntDiv'      {IntDivP}
  | 'IntGte'      {IntGteP}
  | 'IntGt'       {IntGtP}
  | 'IntLte'      {IntLteP}
  | 'IntLt'       {IntLtP}
  | 'IntMod'      {IntModP}
  | 'IntMul'      {IntMulP}
  | 'IntPow'      {IntPowP}
  | 'IntSub'      {IntSubP}
  | 'StrConcat'   {StrConcatP}
  | 'StrGte'      {StrGteP}
  | 'StrGt'       {StrGtP}
  | 'StrLength'   {StrLengthP}
  | 'StrLte'      {StrLteP}
  | 'StrLt'       {StrLtP}
  | 'StrSubstr'   {StrSubstrP}
  | 'VecAppend'   {VecAppendP}
  | 'VecConcat'   {VecConcatP}
  | 'VecGet'      {VecGetP}
  | 'VecLength'   {VecLengthP}
  | 'VecPrepend'  {VecPrependP}
  | 'VecPut'      {VecPutP}.

Filename : Token =
  _+.

// Prelude files

StaticPrelude =
  Spacing StaticPreludeEntry* EOF.

StaticPreludeEntry =
    Identifier sp ':' nestnl(Expression) sp '=' nestnl(Expression) ';' \n
      {StaticLetEntry}
  | Identifier sp ':' nestnl(Expression) ';' \n {StaticTypedEntry}.

DynamicPrelude =
  Spacing Term EOF.

// Constructs used by REPL parsing

REPLInput =
  Spacing REPLEntry EOF.

REPLEntry : REPLInput =
    Expression  {REPLExp}
  | Def         {REPLDef}
  | Let         {REPLLet}.
