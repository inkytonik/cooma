Boolean :
  Type =
  <<
    False : Unit,
    True : Unit
  >>;
false :
  <<
    False : Unit,
    True : Unit
  >>;
true :
  <<
    False : Unit,
    True : Unit
  >>;
ite :
  (t : Type, b : <<
    False : Unit,
    True : Unit
  >>, l : t, r : t) t;
Booleans :
  {
    and : (l : <<
      False : Unit,
      True : Unit
    >>, r : <<
      False : Unit,
      True : Unit
    >>) <<
      False : Unit,
      True : Unit
    >>,
    not : (b : <<
      False : Unit,
      True : Unit
    >>) <<
      False : Unit,
      True : Unit
    >>,
    or : (l : <<
      False : Unit,
      True : Unit
    >>, r : <<
      False : Unit,
      True : Unit
    >>) <<
      False : Unit,
      True : Unit
    >>
  };
equal :
  (t : Type, l : t, r : t) <<
    False : Unit,
    True : Unit
  >>;
Ints :
  {
    abs : (i : Int) Int,
    add : (l : Int, r : Int) Int,
    div : (l : Int, r : Int) Int,
    mod : (l : Int, r : Int) Int,
    mul : (l : Int, r : Int) Int,
    pow : (l : Int, r : Int) Int,
    sub : (l : Int, r : Int) Int,
    lt : (l : Int, r : Int) <<
      False : Unit,
      True : Unit
    >>,
    lte : (l : Int, r : Int) <<
      False : Unit,
      True : Unit
    >>,
    gt : (l : Int, r : Int) <<
      False : Unit,
      True : Unit
    >>,
    gte : (l : Int, r : Int) <<
      False : Unit,
      True : Unit
    >>
  };
Strings :
  {
    concat : (l : String, r : String) String,
    length : (s : String) Int,
    substr : (s : String, i : Int) String
  };
Vectors :
  {
    append : (t : Type, v : Vector(t), e : t) Vector(t),
    concat : (t : Type, l : Vector(t), r : Vector(t)) Vector(t),
    get : (t : Type, v : Vector(t), i : Int) t,
    length : (t : Type, v : Vector(t)) Int,
    prepend : (t : Type, v : Vector(t), e : t) Vector(t),
    put : (t : Type, v : Vector(t), i : Int, e : t) Vector(t)
  };
Database :
  (A : Type) Type =
  fun (A : Type) A;
FolderReader :
  Type =
  {
    read : (suffix : String) <<
      Left : String,
      Right : String
    >>
  };
FolderWriter :
  Type =
  {
    write : (suffix : String, s : String) <<
      Left : String,
      Right : Unit
    >>
  };
HttpReturn :
  Type =
  {
    code : Int,
    body : String
  };
HttpDelete :
  Type =
  {
    delete : (suffix : String) <<
      Left : String,
      Right : HttpReturn
    >>
  };
HttpGet :
  Type =
  {
    get : (suffix : String) <<
      Left : String,
      Right : HttpReturn
    >>
  };
HttpPost :
  Type =
  {
    post : (suffix : String) <<
      Left : String,
      Right : HttpReturn
    >>
  };
HttpPut :
  Type =
  {
    put : (suffix : String) <<
      Left : String,
      Right : HttpReturn
    >>
  };
Reader :
  Type =
  {
    read : () <<
      Left : String,
      Right : String
    >>
  };
Table :
  (A : Type) Type =
  fun (A : Type) {
    all : () Vector(A)
  };
Writer :
  Type =
  {
    write : (s : String) <<
      Left : String,
      Right : Unit
    >>
  };
Either :
  (A : Type, B : Type) Type =
  fun (A : Type, B : Type) <<
    Left : A,
    Right : B
  >>;
Option :
  (T : Type) Type =
  fun (T : Type) <<
    None : Unit,
    Some : T
  >>;
